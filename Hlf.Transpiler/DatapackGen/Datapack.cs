namespace Hlf.Transpiler.DatapackGen;

public class Datapack
{
    public string Name { get; set; }
    public string Namespace { get; set; }
    public int DatapackFormat { get; set; } = 14;
    public string Description { get; set; } = "Generated by Hlf";
    public List<Function> Functions { get; set; } = new();
    public Function? OnLoadFunction;
    public Function? OnTickFunction;

    public Directory Generate()
    {
        Directory rootDir = new(Name);
        
        rootDir.Children.Add(GenerateMcMetaFile());

        Directory dataDir = new("data");
    
        dataDir.Children.Add(GenerateMinecraftDir());
        dataDir.Children.Add(GenerateDatapackDir());
        
        rootDir.Children.Add(dataDir);
        return rootDir;
    }

    public File GenerateMcMetaFile()
    {
        File file = new("pack.mcmeta");
        file.Content = "{\"pack\": {\"pack_format\":" + DatapackFormat + ",\"description\": \"" + Description + "\"}}";
        return file;
    }

    public Directory GenerateMinecraftDir()
    {
        Directory minecraftDir = new("minecraft");
        
        Directory tagsDir = minecraftDir.CreateChild("tags");
        Directory functionDir = tagsDir.CreateChild("function");


        if (OnLoadFunction is not null)
        {
            const bool replace = false;
            string json = $"{{\"replace\": {replace.ToString().ToLower()}, \"values\": [\"{Namespace}:{OnLoadFunction!.Name}\"]}}";
            functionDir.CreateFile("load.json", json);
        }

        if (OnTickFunction is not null)
        {
            const bool replace = false;
            string json = $"{{\"replace\": {replace.ToString().ToLower()}, \"values\": [\"{Namespace}:{OnTickFunction!.Name}\"]}}";
            functionDir.CreateFile("tick.json", json);
        }

        return minecraftDir;
    }

    public Directory GenerateDatapackDir()
    {
        Directory datapackDir = new(Namespace);
        Directory functionDir = datapackDir.CreateChild("function");
        foreach (Function function in Functions)
        {
            functionDir.CreateFile(function.Name + ".mcfunction", function.SourceCode);
        }
        return datapackDir;
    }
}

using System.Diagnostics;
using Hlf.Transpiler;
using Hlf.Transpiler.CodeGen;
using Hlf.Transpiler.DatapackGen;
using File = System.IO.File;

string src = File.ReadAllText(@"C:\Users\zeno\RiderProjects\Hlf.Transpiler\Hlf\first.hlf");

ThrowDefinedSymbolsStatement.AllowSymbolThrows = true;
Transpiler transpiler = new();
try
{
    if (args.Length > 0)
    {
        switch (args[0])
        {
            case "-lex":
                var tokens = Lexer.Lex(src.Replace("\r\n", "\n").Replace('\r', '\n'));
                if (tokens.Length < 1)
                {
                    Console.WriteLine("No tokens found");
                    return;
                }

                Console.WriteLine($"{tokens.Length} Tokens:");
                int typeWidth = tokens.Max(x => x.Type.ToString().Length);
                int contentWidth = tokens.Max(x => x.Content.Length);
                foreach (Token token in tokens)
                {
                    Console.WriteLine($"{token.Type.ToString().PadRight(typeWidth)} : {$"{token.Content}".PadRight(contentWidth)} | line: {token.Line.ToString(),3} | column: {token.Column.ToString(),3}");
                }

                return;
        }
    }

    Stopwatch sw = Stopwatch.StartNew();
    var opt = new GeneratorOptions()
    {
        DatapackNamespace = "first_hlf"
    };

    Datapack datapack = transpiler.Transpile(src, opt);
    datapack.Name = "first_hlf";
    var gen = datapack.Generate();

    new DefaultDirectoryGenerator().GenerateDirectoryStructure(@"C:\Users\zeno\MultiMC\instances\1.21.3 HLF\.minecraft\saves\HflTests\datapacks\", gen);
    /*CreateDataPackStructure(dataPackPath);
    File.WriteAllText(Path.Join(dataPackPath, @"data", "first_hlf", "function", "load.mcfunction"), mcFunction);
    sw.Stop();*/
    Console.WriteLine($"Successfully generated datapack in {sw.Elapsed.TotalMilliseconds}ms");
}
catch (LanguageException l)
{
    //if(Debugger.IsAttached) Debugger.Break();
    //Console.WriteLine($"Error in line {l.Line}: {l.CustomErrorMessage}");
    Console.WriteLine(l.ToString());
}
catch (SymbolThrow symbolThrow)
{
    var data = symbolThrow.SymbolData;

    Console.WriteLine("Functions: " + string.Join(", ", data.Functions));
    Console.WriteLine("Variables: " + string.Join(", ", data.Variables));
    Console.WriteLine("Types:     " + string.Join(", ", data.Types));
}

return;

/*
void CreateDataPackStructure(string dataPackPath)
{
    string dataPackName = Path.GetFileName(Path.GetDirectoryName(dataPackPath)!);
    Directory.CreateDirectory(dataPackPath);
    Directory.CreateDirectory(Path.Join(dataPackPath, "data", "minecraft", "tags", "function"));
    Directory.CreateDirectory(Path.Join(dataPackPath, "data", dataPackName, "function"));
    File.WriteAllText(Path.Join(dataPackPath, "data", "minecraft", "tags", "function", "load.json"), $"{{\"replace\": false, \"values\": [\"{dataPackName}:load\"]}}");
    File.WriteAllText(Path.Join(dataPackPath, "pack.mcmeta"), "{\"pack\": {\"pack_format\":14,\"description\": \"Generated by HLF\"}}");
}*/